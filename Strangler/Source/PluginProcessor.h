/*
  ==============================================================================

    This file was auto-generated by the Jucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#ifndef __PLUGINPROCESSOR_H_DBC3AD65__
#define __PLUGINPROCESSOR_H_DBC3AD65__

//#include "src/audio/plugin_client/VST/juce_VST_Wrapper.cpp"
#include "JuceHeader.h"
#include "JucePluginCharacteristics.h"
#include "IPluginPropertyConsumer.h"
#include "IInterpolationProvider.h"
#include "StreamProperties.h"
#include "ClassicDynamicCompressor.h"
#include <map>

using std::map;

class PluginProperty;
class StreamProperties;
class ClassicDynamicCompressor;
//==============================================================================
/**
*/
class StranglerAudioProcessor  : public AudioProcessor, virtual IPluginPropertyConsumer
{
public:
    //==============================================================================
    StranglerAudioProcessor();
    ~StranglerAudioProcessor();

    //==============================================================================
    void prepareToPlay (double sampleRate, int samplesPerBlock);
    void releaseResources();

    void processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages);

    //==============================================================================
    AudioProcessorEditor* createEditor();
    bool hasEditor() const;

    //==============================================================================
    const String getName() const;

    int getNumParameters();

    float getParameter (int index);
    void setParameter (int index, float newValue);

    const String getParameterName (int index);
    const String getParameterText (int index);

    const String getInputChannelName (int channelIndex) const;
    const String getOutputChannelName (int channelIndex) const;
    bool isInputChannelStereoPair (int index) const;
    bool isOutputChannelStereoPair (int index) const;

    bool acceptsMidi() const;
    bool producesMidi() const;

    //==============================================================================
    int getNumPrograms();
    int getCurrentProgram();
    void setCurrentProgram (int index);
    const String getProgramName (int index);
    void changeProgramName (int index, const String& newName);

    //==============================================================================
    void getStateInformation (MemoryBlock& destData);
    void setStateInformation (const void* data, int sizeInBytes);

	PluginProperty* getProp(int index);
	StreamProperties& getStreamProps();
	virtual void invalidateProperties(void);

	void handlePropsInvalidation(void);

	enum PropList
	{
		attackSpeed = 0,
		releaseSpeed,
		thresold,
		limit,
		hardLimit,
		autoGain,
	};

private:
	StreamProperties m_streamProp;
	map<int, PluginProperty*> m_propList;
	ClassicDynamicCompressor m_comp;
	bool m_propsInvalidated;
    //==============================================================================
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (StranglerAudioProcessor);
};

#endif  // __PLUGINPROCESSOR_H_DBC3AD65__
